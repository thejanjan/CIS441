This project is in three phases:
1) adapt to reading data with z-values and per-vertex colors
2) implement Z-buffer algorithm
3) implement interpolation of colors


== Phase 1 ==

Download the starter code (proj1D_starter.c Download proj1D_starter.c) and the new input file (tris_w_r_rgb.txt Download tris_w_r_rgb.txt).  Update your code to use the new routine for reading data (Get3DTriangles) and incorporate the new struct for Triangles.  (You don't need to copy mine.  But you need to add a 'z' field and you need to change your colors so you have per-vertex colors instead of per-triangle colors and also so these colors are doubles and not unsigned chars.)  The data file (tris_w_r_rgb.txt Download tris_w_r_rgb.txt) has a z-value for every triangle vertex and a color for every triangle vertex.

Modify your code so that it works with the new fields.  For Phase 1, this means:
-- let Get3DTriangles read a Z value, but don't use it
-- let Get3DTriangles read colors for each vertex.  You will use the color for vertex 0.  Read on.

In 1C, you set the color for each pixel to be the single color for the triangle.  In Phase 1, just use the color from vertex 0 -- the whole triangle will have one color in this phase, i.e., the color from vertex 0.  That said, note that colors have changed from unsigned chars to doubles with values between 0 and 1.  But images still need unsigned char data.  So, when assigning this color to your image data, do something like this:

 image.color[index].r = C441(r*255);

(I don't care whether the left-hand side of the equation looks like this example above.  But you should do "C441" and multiply it by 255.)

Next, compile and run everything.  This phase is about making sure your code works with the new data members and nothing went catastrophically wrong.

Finally, change your image to be 1000x1000 and its name to be proj1D_out.pnm.

If you ignore the new z values and use vertex 0's color as the triangle color, then you should get this output: proj1D_phase1.pnmDownload proj1D_phase1.pnm

proj1D_phase1.png

== Phase 2 ==

In this phase, you will implement the z-buffer algorithm.  This means you will need to do interpolation, i.e., interpolating the z field to each fragment in the triangle.

You should get this output: proj1D_phase2.pnmDownload proj1D_phase2.pnm

proj1D_phase2.png

== Phase 3 ==

In this phase, you will implement color interpolation, i.e., the correct color for every fragment.  The colors are stored as doubles.  You should keep them as doubles all the way until you store them in the image.  When you store them in the image, do it this way (same as Phase 1 -- multiply by 255 and then use C441).

When you are done, you should get this: proj1D_soln.pnmDownload proj1D_soln.pnm

proj1D_soln.png

To assist with your debugging, I added some pretty extensive print statements for the first 10 triangles: first10Download first10

Finally, here is a massive file: zrgb_infoDownload zrgb_info

For each pixel, this file has the triangle ID that contributed the final fragment to that file, as well as its z-value and color values (in double form).

== Submission ==

As always, you should verify your program works on ix-dev using the checker script: proj1D_checkerDownload proj1D_checker

The image it needs (proj1D_soln.pnm Download proj1D_soln.pnm) is the same one from Phase 3.

Upload a single file, named proj1D.c or proj1D.cpp.  Its output should be called proj1D_out.pnm.